# Generated by Django 5.2.1 on 2025-05-29 04:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the amenity', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Amenity',
                'verbose_name_plural': 'Amenities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Flooring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the flooring (2-100 characters)', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
            ],
            options={
                'verbose_name': 'Flooring',
                'verbose_name_plural': 'Floorings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Furnishing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the furnishing item', max_length=100, unique=True)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Quantity of the furnishing item', validators=[django.core.validators.MinValueValidator(1)])),
            ],
            options={
                'verbose_name': 'Furnishing',
                'verbose_name_plural': 'Furnishings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Highlight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the highlight', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Highlight',
                'verbose_name_plural': 'Highlights',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Overlooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='What the property overlooks', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Overlooking',
                'verbose_name_plural': 'Overlookings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Parking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of parking (2-100 characters)', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
            ],
            options={
                'verbose_name': 'Parking',
                'verbose_name_plural': 'Parkings',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('verification_token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('password_reset_token', models.CharField(blank=True, max_length=100, null=True)),
                ('password_reset_expires', models.DateTimeField(blank=True, null=True)),
                ('last_password_change', models.DateTimeField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='NearbyPlace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the nearby place (e.g., Hospital, School, Park)', max_length=100)),
                ('distance', models.DecimalField(decimal_places=2, help_text='Distance from the property/project in kilometers', max_digits=5)),
            ],
            options={
                'verbose_name': 'Nearby Place',
                'verbose_name_plural': 'Nearby Places',
                'ordering': ['name'],
                'unique_together': {('name', 'distance')},
            },
        ),
        migrations.CreateModel(
            name='PasswordChangeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Password Change History',
                'ordering': ['-changed_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the project', max_length=100)),
                ('locality', models.CharField(help_text='Locality of the project', max_length=150)),
                ('city', models.CharField(help_text='City where the project is located', max_length=50)),
                ('district', models.CharField(help_text='District where the project is located', max_length=50)),
                ('state', models.CharField(help_text='State where the project is located', max_length=50)),
                ('address', models.TextField(blank=True, help_text='Full address of the project')),
                ('landmark', models.CharField(blank=True, help_text='Landmark near the project', max_length=150)),
                ('price_range_start', models.DecimalField(decimal_places=2, help_text='Starting price range', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('price_range_end', models.DecimalField(decimal_places=2, help_text='Ending price range', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('per_sq_ft_price', models.DecimalField(decimal_places=2, help_text='Price per square foot', max_digits=10)),
                ('total_area', models.DecimalField(decimal_places=2, help_text='Total area of the project', max_digits=12)),
                ('open_area', models.DecimalField(blank=True, decimal_places=2, help_text='Open area in the project', max_digits=12, null=True)),
                ('rera_approved', models.BooleanField(default=False, help_text='Is the project RERA approved?')),
                ('possession', models.DateField(help_text='Estimated possession date')),
                ('completion_year', models.DateField(help_text='Estimated completion year')),
                ('property_type', models.CharField(choices=[('RESIDENTIAL_APARTMENT', 'Residential Apartment'), ('INDEPENDENT_BUILDER_FLOOR', 'Independent/Builder Floor'), ('INDEPENDENT_HOUSE_VILLA', 'Independent House/Villa'), ('RESIDENTIAL_LAND', 'Residential Land'), ('STUDIO_APARTMENT', '1 RK/Studio Apartment'), ('FARMHOUSE', 'Farm House'), ('SERVICED_APARTMENTS', 'Serviced Apartments'), ('OTHER', 'Other'), ('OFFICE_SPACES', 'Office Spaces'), ('READY_TO_MOVE', 'Ready to Move'), ('BARESHELL', 'BareShell'), ('CO_WORKING', 'Co-Working'), ('RETAIL_SHOPS_SHOWROOMS', 'Retail Shops/Showrooms'), ('SHOPS', 'Shops'), ('SHOWROOMS', 'Showrooms'), ('OTHER_COMMERCIAL_SPACES', 'Other Commercial Spaces'), ('COMMERCIAL_LAND_INST_LAND', 'Commercial/Inst. Land'), ('INDUSTRIAL_LANDS_PLOTS', 'Industrial Lands/Plots'), ('AGRICULTURAL_FARM_LAND', 'Agricultural/Farm Land'), ('HOTEL_RESORTS', 'Hotel/Resorts'), ('GUEST_HOUSE_BANQUET_HALLS', 'Guest-House/Banquet-Halls'), ('WAREHOUSE', 'Ware House'), ('COLD_STORAGE', 'Cold Storage'), ('FACTORY', 'Factory'), ('MANUFACTURING', 'Manufacturing'), ('OTHER_PROPERTY', 'Other')], help_text='Type of property', max_length=30)),
                ('project_type', models.CharField(choices=[('RESIDENTIAL', 'Residential'), ('COMMERCIAL', 'Commercial')], help_text='Type of project (Residential/Commercial)', max_length=15)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the project')),
                ('advantages', models.TextField(blank=True, help_text='Advantages of the project')),
                ('disadvantages', models.TextField(blank=True, help_text='Disadvantages of the project')),
                ('developed_by', models.CharField(help_text='Developer of the project', max_length=100)),
                ('construction_status', models.CharField(choices=[('UPCOMING', 'Upcoming'), ('UNDER_CONSTRUCTION', 'Under Construction'), ('PHASE_1_COMPLETED', 'Phase 1 Completed'), ('PHASE_2_COMPLETED', 'Phase 2 Completed'), ('LAST_PHASE_PENDING', 'Last Phase Pending'), ('READY_TO_MOVE', 'Ready to Move'), ('PARTIALLY_READY_TO_MOVE', 'Partially Ready to Move'), ('NEW_LAUNCH', 'New Launch')], help_text='Current construction status', max_length=25)),
                ('negotiable', models.BooleanField(default=False, help_text='Is the price negotiable?')),
                ('total_number_of_towers', models.PositiveIntegerField(help_text='Total number of towers in the project')),
                ('total_number_of_floors', models.PositiveIntegerField(help_text='Total number of floors in the project')),
                ('total_rooms', models.PositiveIntegerField(help_text='Total number of rooms in the project')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('amenities', models.ManyToManyField(blank=True, help_text='Amenities available in the project', related_name='projects', to='key2yourhomeApp.amenity')),
                ('highlights', models.ManyToManyField(blank=True, help_text='Highlights/features of the project', related_name='projects', to='key2yourhomeApp.highlight')),
                ('nearby_places', models.ManyToManyField(blank=True, help_text='Nearby places to the project', related_name='projects', to='key2yourhomeApp.nearbyplace')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Phase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phase_name', models.CharField(help_text='Name of the phase (e.g., Phase 1, Phase 2)', max_length=50)),
                ('number_of_towers', models.PositiveIntegerField(help_text='Number of towers in this phase')),
                ('construction_status', models.CharField(choices=[('UPCOMING', 'Upcoming'), ('UNDER_CONSTRUCTION', 'Under Construction'), ('PHASE_1_COMPLETED', 'Phase 1 Completed'), ('PHASE_2_COMPLETED', 'Phase 2 Completed'), ('LAST_PHASE_PENDING', 'Last Phase Pending'), ('READY_TO_MOVE', 'Ready to Move'), ('PARTIALLY_READY_TO_MOVE', 'Partially Ready to Move'), ('NEW_LAUNCH', 'New Launch')], help_text='Current construction status of the phase', max_length=120)),
                ('possession', models.DateField(help_text='Estimated possession date')),
                ('completion_year', models.DateField(help_text='Estimated completion year')),
                ('number_of_bedrooms', models.CharField(choices=[('1BHK', '1 BHK'), ('2BHK', '2 BHK'), ('3BHK', '3 BHK'), ('4BHK', '4 BHK'), ('5BHK', '5 BHK'), ('6BHK', '6 BHK'), ('7BHK', '7 BHK'), ('8BHK', '8 BHK'), ('9BHK', '9 BHK'), ('9+_BHK', '9+ BHK')], help_text='Number of bedrooms configuration', max_length=10)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phases', to='key2yourhomeApp.project')),
            ],
            options={
                'verbose_name': 'Phase',
                'verbose_name_plural': 'Phases',
                'ordering': ['project', 'phase_name'],
            },
        ),
        migrations.CreateModel(
            name='FloorPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('carpet_area', models.DecimalField(decimal_places=2, help_text='Carpet area in square feet/meters', max_digits=12)),
                ('price_range_start', models.DecimalField(decimal_places=2, help_text='Starting price range for this floor plan', max_digits=12)),
                ('price_range_end', models.DecimalField(decimal_places=2, help_text='Ending price range for this floor plan', max_digits=12)),
                ('number_of_bedrooms', models.CharField(choices=[('1_BHK', '1 BHK'), ('2_BHK', '2 BHK'), ('3_BHK', '3 BHK'), ('4_BHK', '4 BHK'), ('5_BHK', '5 BHK'), ('6_BHK', '6 BHK'), ('7_BHK', '7 BHK'), ('8_BHK', '8 BHK'), ('9_BHK', '9 BHK'), ('9+_BHK', '9+ BHK')], help_text='Number of bedrooms configuration', max_length=10)),
                ('construction_status', models.CharField(blank=True, choices=[('UPCOMING', 'Upcoming'), ('UNDER_CONSTRUCTION', 'Under Construction'), ('PHASE_1_COMPLETED', 'Phase 1 Completed'), ('PHASE_2_COMPLETED', 'Phase 2 Completed'), ('LAST_PHASE_PENDING', 'Last Phase Pending'), ('READY_TO_MOVE', 'Ready to Move'), ('PARTIALLY_READY_TO_MOVE', 'Partially Ready to Move'), ('NEW_LAUNCH', 'New Launch')], help_text='Construction status for this floor plan', max_length=25, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed price (if applicable)', max_digits=12, null=True)),
                ('possession', models.DateField(blank=True, help_text='Possession date for this floor plan', null=True)),
                ('living_dining_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Living/Dining area length', max_digits=6, null=True)),
                ('living_dining_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Living/Dining area breadth', max_digits=6, null=True)),
                ('kitchen_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Kitchen area length', max_digits=6, null=True)),
                ('kitchen_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Kitchen area breadth', max_digits=6, null=True)),
                ('bedroom_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Bedroom area length', max_digits=6, null=True)),
                ('bedroom_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Bedroom area breadth', max_digits=6, null=True)),
                ('toilet_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Toilet area length', max_digits=6, null=True)),
                ('toilet_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Toilet area breadth', max_digits=6, null=True)),
                ('bathroom_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Bathroom area length', max_digits=6, null=True)),
                ('bathroom_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Bathroom area breadth', max_digits=6, null=True)),
                ('utility_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Utility area length', max_digits=6, null=True)),
                ('utility_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Utility area breadth', max_digits=6, null=True)),
                ('wardrobe_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Wardrobe area length', max_digits=6, null=True)),
                ('wardrobe_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Wardrobe area breadth', max_digits=6, null=True)),
                ('foyer_area_length', models.DecimalField(blank=True, decimal_places=2, help_text='Foyer area length', max_digits=6, null=True)),
                ('foyer_area_breadth', models.DecimalField(blank=True, decimal_places=2, help_text='Foyer area breadth', max_digits=6, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='floor_plans', to='key2yourhomeApp.project')),
            ],
            options={
                'verbose_name': 'Floor Plan',
                'verbose_name_plural': 'Floor Plans',
                'ordering': ['project', 'number_of_bedrooms'],
            },
        ),
        migrations.CreateModel(
            name='ProjectReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating from 1 (Poor) to 5 (Excellent)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('title', models.CharField(help_text='Brief summary of the review', max_length=100, verbose_name='title')),
                ('comment', models.TextField(help_text='Detailed review content', verbose_name='comment')),
                ('category', models.CharField(choices=[('location', 'Location'), ('design', 'Design & Architecture'), ('amenities', 'Amenities'), ('quality', 'Construction Quality'), ('value', 'Value for Money')], default='location', help_text='Main focus of this review', max_length=20, verbose_name='review category')),
                ('is_approved', models.BooleanField(default=False, help_text='Has this review been approved by moderators?', verbose_name='is approved')),
                ('is_featured', models.BooleanField(default=False, help_text='Should this review be prominently displayed?', verbose_name='is featured')),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='Number of users who found this review helpful', verbose_name='helpful count')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('owner_response', models.TextField(blank=True, help_text='Response from the property/project owner', null=True, verbose_name='owner response')),
                ('response_date', models.DateTimeField(blank=True, null=True, verbose_name='response date')),
                ('design_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for project design and architecture', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='design rating')),
                ('location_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for project location', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='location rating')),
                ('amenities_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for project amenities', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='amenities rating')),
                ('quality_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for construction quality', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='quality rating')),
                ('value_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for value for money', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='value rating')),
                ('project', models.ForeignKey(help_text='Project being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='key2yourhomeApp.project', verbose_name='project')),
                ('user', models.ForeignKey(help_text='User who submitted the review', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_reviews', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'project review',
                'verbose_name_plural': 'project reviews',
                'ordering': ['-is_featured', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('city', models.CharField(help_text='City where the property is located', max_length=100)),
                ('locality', models.CharField(blank=True, help_text='Locality of the project', max_length=150, null=True)),
                ('district', models.CharField(help_text='District where the property is located', max_length=100)),
                ('state', models.CharField(help_text='State where the property is located', max_length=100)),
                ('landmark', models.CharField(blank=True, help_text='Landmark near the property', max_length=100)),
                ('address', models.TextField(help_text='Full address of the property')),
                ('society_name', models.CharField(blank=True, help_text='Society name where the property is located', max_length=100)),
                ('floor_no', models.PositiveIntegerField(blank=True, help_text='Floor number of the property', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('property_age', models.PositiveIntegerField(blank=True, help_text='Property age in years', null=True, validators=[django.core.validators.MaxValueValidator(100)])),
                ('configuration', models.CharField(help_text='Configuration of the property (e.g., 1 Bedroom, 2 Bathrooms)', max_length=100)),
                ('price_in_rs', models.DecimalField(decimal_places=2, help_text='Price of the property in INR', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('per_sq_ft_price', models.DecimalField(decimal_places=2, help_text='Price per square foot of the property in INR', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('carpet_area', models.DecimalField(blank=True, decimal_places=2, help_text='Carpet Area of the Property', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('build_up_area', models.DecimalField(blank=True, decimal_places=2, help_text='Build-up Area of the Property', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('verified', models.BooleanField(default=False, help_text='Verification status of the property')),
                ('rera_approved', models.BooleanField(default=False, help_text='RERA approval status of the property')),
                ('negotiable', models.BooleanField(default=False, help_text='Is the property price negotiable?')),
                ('gated_community', models.BooleanField(default=False, help_text='Is the property located in a gated community?')),
                ('corner_property', models.BooleanField(blank=True, help_text='Is the property located at junctions or corner?', null=True)),
                ('pet_friendly', models.BooleanField(default=False, help_text='Pet Friendly status of the property')),
                ('number_of_bedrooms', models.CharField(choices=[('1_BHK', '1 BHK'), ('2_BHK', '2 BHK'), ('3_BHK', '3 BHK'), ('4_BHK', '4 BHK'), ('5_BHK', '5 BHK'), ('6_BHK', '6 BHK'), ('7_BHK', '7 BHK'), ('8_BHK', '8 BHK'), ('9_BHK', '9 BHK'), ('9+_BHK', '9+ BHK')], help_text='Number of bedrooms in the property', max_length=10)),
                ('facing', models.CharField(blank=True, choices=[('EAST', 'East'), ('WEST', 'West'), ('NORTH', 'North'), ('SOUTH', 'South')], help_text='Facing direction of the property', max_length=10, null=True)),
                ('property_type', models.CharField(choices=[('RESIDENTIAL_APARTMENT', 'Residential Apartment'), ('INDEPENDENT_BUILDER_FLOOR', 'Independent/Builder Floor'), ('INDEPENDENT_HOUSE_VILLA', 'Independent House/Villa'), ('RESIDENTIAL_LAND', 'Residential Land'), ('STUDIO_APARTMENT', '1 RK/Studio Apartment'), ('FARMHOUSE', 'Farmhouse'), ('SERVICED_APARTMENTS', 'Serviced Apartments'), ('OTHER', 'Other'), ('OFFICE_SPACES', 'Office Spaces'), ('READY_TO_MOVE', 'Ready to Move'), ('BARESHELL', 'Bare Shell'), ('CO_WORKING', 'Co-Working'), ('RETAIL_SHOPS_SHOWROOMS', 'Retail Shops/Showrooms'), ('SHOPS', 'Shops'), ('SHOWROOMS', 'Showrooms'), ('OTHER_COMMERCIAL_SPACES', 'Other Commercial Spaces'), ('COMMERCIAL_LAND_INST_LAND', 'Commercial/Institutional Land'), ('INDUSTRIAL_LANDS_PLOTS', 'Industrial Lands/Plots'), ('AGRICULTURAL_FARM_LAND', 'Agricultural/Farm Land'), ('HOTEL_RESORTS', 'Hotel/Resorts'), ('GUEST_HOUSE_BANQUET_HALLS', 'Guest House/Banquet Halls'), ('WAREHOUSE', 'Warehouse'), ('COLD_STORAGE', 'Cold Storage'), ('FACTORY', 'Factory'), ('MANUFACTURING', 'Manufacturing'), ('OTHER_PROPERTY', 'Other')], help_text='Type of property', max_length=30)),
                ('construction_status', models.CharField(choices=[('UPCOMING', 'Upcoming'), ('UNDER_CONSTRUCTION', 'Under Construction'), ('PHASE_1_COMPLETED', 'Phase 1 Completed'), ('PHASE_2_COMPLETED', 'Phase 2 Completed'), ('LAST_PHASE_PENDING', 'Last Phase Pending'), ('READY_TO_MOVE', 'Ready to Move'), ('PARTIALLY_READY_TO_MOVE', 'Partially Ready to Move'), ('NEW_LAUNCH', 'New Launch')], help_text='Construction status of the property', max_length=25)),
                ('furnishing_status', models.CharField(choices=[('UNFURNISHED', 'Unfurnished'), ('SEMI_FURNISHED', 'Semi Furnished'), ('FURNISHED', 'Furnished')], help_text='Furnishing status of the property', max_length=15)),
                ('ownership_type', models.CharField(choices=[('FREEHOLD', 'Freehold'), ('LEASEHOLD', 'Leasehold'), ('INDIVIDUAL_OWNERSHIP', 'Individual Ownership'), ('CO_OWNERSHIP', 'Co-Ownership')], help_text='Type of ownership of the property', max_length=20)),
                ('transaction_type', models.CharField(choices=[('RESALE', 'Resale'), ('NEW_PROPERTY', 'New Property')], help_text='Transaction type (resale or new property)', max_length=15)),
                ('power_backup', models.CharField(choices=[('FULL', 'Full'), ('PARTIAL', 'Partial'), ('NONE', 'None')], help_text='Power backup in the property', max_length=10)),
                ('water_source', models.CharField(blank=True, choices=[('24_7_WATER_SUPPLY', '24*7 Water Supply'), ('MUNICIPAL_CORPORATION', 'Municipal Corporation')], help_text='Water source for the property', max_length=25, null=True)),
                ('property_code', models.CharField(default=uuid.uuid4, help_text='Unique code for the property', max_length=50, unique=True)),
                ('width_of_facing_road', models.FloatField(blank=True, help_text='Width of the road facing the property', null=True)),
                ('advantages', models.TextField(blank=True, help_text='Advantages of the property')),
                ('disadvantages', models.TextField(blank=True, help_text='Disadvantages of the property')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the property')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('amenities', models.ManyToManyField(blank=True, help_text='Amenities available in the property', related_name='properties', to='key2yourhomeApp.amenity')),
                ('flooring', models.ForeignKey(help_text='Type of flooring in the property', on_delete=django.db.models.deletion.PROTECT, related_name='properties', to='key2yourhomeApp.flooring')),
                ('furnishings', models.ManyToManyField(blank=True, help_text='Furnishings available in the property', related_name='properties', to='key2yourhomeApp.furnishing')),
                ('highlights', models.ManyToManyField(blank=True, help_text='Highlights/features of the property', related_name='properties', to='key2yourhomeApp.highlight')),
                ('nearby_places', models.ManyToManyField(blank=True, help_text='Nearby places to the property', related_name='properties', to='key2yourhomeApp.nearbyplace')),
                ('overlooking', models.ManyToManyField(blank=True, help_text='What the property overlooks', related_name='properties', to='key2yourhomeApp.overlooking')),
                ('parking', models.ForeignKey(help_text='Type of parking available', on_delete=django.db.models.deletion.PROTECT, related_name='properties', to='key2yourhomeApp.parking')),
                ('project', models.ForeignKey(help_text='Project this property belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='properties', to='key2yourhomeApp.project')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Title of the media', max_length=255)),
                ('about', models.TextField(blank=True, help_text='Description about the media', max_length=1000)),
                ('media_type', models.CharField(choices=[('IMAGE', 'Image'), ('VIDEO', 'Video'), ('FILE', 'File')], help_text='Type of media', max_length=10)),
                ('file', models.FileField(help_text='Upload media file', upload_to='real_estate_media/')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media', to='key2yourhomeApp.project')),
                ('property', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media', to='key2yourhomeApp.property')),
            ],
            options={
                'verbose_name': 'Media',
                'verbose_name_plural': 'Media',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who bookmarked the property/project', on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, help_text='Bookmarked project', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='key2yourhomeApp.project')),
                ('property', models.ForeignKey(blank=True, help_text='Bookmarked property', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='key2yourhomeApp.property')),
            ],
            options={
                'verbose_name': 'Bookmark',
                'verbose_name_plural': 'Bookmarks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating from 1 (Poor) to 5 (Excellent)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('title', models.CharField(help_text='Brief summary of the review', max_length=100, verbose_name='title')),
                ('comment', models.TextField(help_text='Detailed review content', verbose_name='comment')),
                ('category', models.CharField(choices=[('location', 'Location'), ('design', 'Design & Architecture'), ('amenities', 'Amenities'), ('quality', 'Construction Quality'), ('value', 'Value for Money')], default='location', help_text='Main focus of this review', max_length=20, verbose_name='review category')),
                ('is_approved', models.BooleanField(default=False, help_text='Has this review been approved by moderators?', verbose_name='is approved')),
                ('is_featured', models.BooleanField(default=False, help_text='Should this review be prominently displayed?', verbose_name='is featured')),
                ('helpful_count', models.PositiveIntegerField(default=0, help_text='Number of users who found this review helpful', verbose_name='helpful count')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('owner_response', models.TextField(blank=True, help_text='Response from the property/project owner', null=True, verbose_name='owner response')),
                ('response_date', models.DateTimeField(blank=True, null=True, verbose_name='response date')),
                ('condition_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for property condition', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='condition rating')),
                ('neighborhood_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for the neighborhood', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='neighborhood rating')),
                ('value_rating', models.PositiveSmallIntegerField(choices=[(1, '1 - Poor'), (2, '2 - Fair'), (3, '3 - Average'), (4, '4 - Good'), (5, '5 - Excellent')], help_text='Rating for value for money', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='value rating')),
                ('is_verified_tenant', models.BooleanField(default=False, help_text='Was this review submitted by a verified tenant?', verbose_name='verified tenant')),
                ('is_verified_owner', models.BooleanField(default=False, help_text='Was this review submitted by a verified owner?', verbose_name='verified owner')),
                ('move_in_date', models.DateField(blank=True, help_text='When the reviewer moved in (if applicable)', null=True, verbose_name='move in date')),
                ('move_out_date', models.DateField(blank=True, help_text='When the reviewer moved out (if applicable)', null=True, verbose_name='move out date')),
                ('property_link', models.ForeignKey(help_text='Property being reviewed', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='key2yourhomeApp.property', verbose_name='property')),
                ('user', models.ForeignKey(help_text='User who submitted the review', on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_reviews', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'property review',
                'verbose_name_plural': 'property reviews',
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoomPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('number_of_bedrooms', models.CharField(help_text='Number of bedrooms configuration (e.g., 1BHK, 2BHK)', max_length=10)),
                ('carpet_area', models.DecimalField(decimal_places=2, help_text='Carpet area in square feet/meters', max_digits=12)),
                ('price_range_start', models.DecimalField(decimal_places=2, help_text='Starting price range for this room plan', max_digits=12)),
                ('price_range_end', models.DecimalField(decimal_places=2, help_text='Ending price range for this room plan', max_digits=12)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_plans', to='key2yourhomeApp.project')),
            ],
            options={
                'verbose_name': 'Room Plan',
                'verbose_name_plural': 'Room Plans',
                'ordering': ['project', 'number_of_bedrooms'],
            },
        ),
        migrations.CreateModel(
            name='SearchQueryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_type', models.CharField(choices=[('PROPERTY', 'Property'), ('PROJECT', 'Project'), ('GENERAL', 'General')], max_length=10)),
                ('query', models.JSONField()),
                ('results_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.CharField(db_index=True, max_length=255)),
                ('search_type', models.CharField(choices=[('PROPERTY', 'Property'), ('PROJECT', 'Project'), ('GENERAL', 'General')], max_length=10)),
                ('weight', models.FloatField(default=1.0)),
                ('last_used', models.DateTimeField(auto_now=True)),
                ('use_count', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-weight', '-use_count'],
                'unique_together': {('term', 'search_type')},
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('remember_me', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='CookieConsent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                ('consent_date', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cookie Consent',
                'verbose_name_plural': 'Cookie Consents',
                'indexes': [models.Index(fields=['user'], name='key2yourhom_user_id_95d605_idx'), models.Index(fields=['session_key'], name='key2yourhom_session_2866ed_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='project',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='key2yourhom_search__534346_gin'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['search_vector'], name='key2yourhom_search__11a68f_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['name'], name='key2yourhom_name_4d7ca8_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['city'], name='key2yourhom_city_1c4daa_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['state'], name='key2yourhom_state_245c6f_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['property_type'], name='key2yourhom_propert_040798_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['project_type'], name='key2yourhom_project_34b281_idx'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['construction_status'], name='key2yourhom_constru_8144ce_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='phase',
            unique_together={('project', 'phase_name')},
        ),
        migrations.AlterUniqueTogether(
            name='floorplan',
            unique_together={('project', 'number_of_bedrooms', 'carpet_area')},
        ),
        migrations.AlterUniqueTogether(
            name='projectreview',
            unique_together={('project', 'user')},
        ),
        migrations.AddIndex(
            model_name='property',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='key2yourhom_search__4c8c7a_gin'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['search_vector'], name='key2yourhom_search__a7b71e_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['city'], name='key2yourhom_city_353a2c_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['locality'], name='key2yourhom_localit_497a14_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['district'], name='key2yourhom_distric_b39ea7_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['state'], name='key2yourhom_state_6e4ab6_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['property_type'], name='key2yourhom_propert_d57bad_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['construction_status'], name='key2yourhom_constru_a98c5a_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['furnishing_status'], name='key2yourhom_furnish_937b6f_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['transaction_type'], name='key2yourhom_transac_6e49f5_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['price_in_rs'], name='key2yourhom_price_i_b2c596_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['per_sq_ft_price'], name='key2yourhom_per_sq__db7823_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['property_code'], name='key2yourhom_propert_4ad25f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bookmark',
            unique_together={('user', 'project'), ('user', 'property')},
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['rating'], name='key2yourhom_rating_00b270_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['is_approved'], name='key2yourhom_is_appr_277fd1_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['is_featured'], name='key2yourhom_is_feat_a4f7e3_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyreview',
            index=models.Index(fields=['created_at'], name='key2yourhom_created_75f6f9_idx'),
        ),
        migrations.AddConstraint(
            model_name='propertyreview',
            constraint=models.UniqueConstraint(fields=('user', 'property_link'), name='unique_user_property_review', violation_error_message='You have already reviewed this property'),
        ),
        migrations.AlterUniqueTogether(
            name='roomplan',
            unique_together={('project', 'number_of_bedrooms', 'carpet_area')},
        ),
        migrations.AddIndex(
            model_name='searchquerylog',
            index=models.Index(fields=['user'], name='key2yourhom_user_id_dba5de_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquerylog',
            index=models.Index(fields=['created_at'], name='key2yourhom_created_467bcd_idx'),
        ),
        migrations.AddIndex(
            model_name='searchquerylog',
            index=models.Index(fields=['search_type'], name='key2yourhom_search__aa58ac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usersession',
            unique_together={('user', 'session_key')},
        ),
    ]
